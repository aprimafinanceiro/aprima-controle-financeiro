import os
import re
import logging
from datetime import datetime, timedelta
from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
import sqlite3
import spacy
import pandas as pd
import locale
import uuid  # Adicionado aqui para corrigir o erro
from unidecode import unidecode  # Adicione isso

# Configura√ß√µes
NGROK_URL = "https://631d-2804-1b1c-200a-d300-3ca7-3ea0-6b3d-1305.ngrok-free.app"

ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
ADMIN_NUMERO = os.getenv("ADMIN_NUMERO", "whatsapp:+555198995077")

MENSAGEM_BOAS_VINDAS = """
üéâ Ol√°! Bem-vindo(a) ao Aprima Controle Financeiro! üéâ

Eu sou seu ajudante para organizar gastos e receitas pelo WhatsApp. Veja como usar:

üìå Registrar Gastos : "Gastei 50 em mercado" ou "50 no cinema ontem"
üìå Registrar Receitas: "Recebi 100 de sal√°rio" ou "Ganhei 30 de freela"
üìå Ver Relat√≥rios : "Resumo do Dia", "Relat√≥rio Semanal" ou "Relat√≥rio Mensal"
üìå Excluir lan√ßamentos : "Excluir #abcd" (use o ID mostrado ao registrar)

üí° Dica: Voc√™ pode registrar v√°rias coisas de uma vez, como "Gastei 20 em mercado e 30 em gasolina".

Qualquer d√∫vida, √© s√≥ perguntar! Como posso te ajudar agora? üòä
"""

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configura√ß√£o de locale e SpaCy
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except locale.Error:
    locale.setlocale(locale.LC_ALL, '')  # Usa o locale padr√£o do sistema
    
nlp = spacy.load("pt_core_news_sm")

# Categorias e Subcategorias
CATEGORIAS_DESPESA = {
    "Moradia": [
        "aluguel", "presta√ß√£o do im√≥vel", "m√≥veis", "mobilia", "eletrodom√©sticos", "eletros", "decora√ß√£o", "decor", 
        "reparos", "consertos", "jardinagem", "jardim", "condom√≠nio", "condo", "IPTU", "seguran√ßa residencial", 
        "mudan√ßa", "despachante imobili√°rio", "porteiro", "zelador", "taxas de manuten√ß√£o", "financiamento casa", 
        "hipoteca", "limpeza", "faxina", "alugar", "casa pr√≥pria", "quarto", "kitnet", "apartamento", "ch√°cara", 
        "s√≠tio", "luz da casa", "√°gua da casa", "g√°s da casa"
    ],
    "Alimenta√ß√£o": [
        "supermercado", "mercado", "feira", "feirinha", "padaria", "p√£o", "a√ßougue", "carne", "hortifruti", "verdura", 
        "bebidas", "bebida", "comida org√¢nica", "org√¢nicos", "suplementos", "vitaminas", "utens√≠lios de cozinha", 
        "panelas", "produtos naturais", "delivery de supermercado", "ra√ß√£o para pets", "comida", "mantimento", 
        "lanche", "guloseimas", "doces", "salgados", "leite", "frutas", "verduras", "cereais", "enlatados", "congelados"
    ],
    "Comer fora": [
        "restaurante", "restaurantes", "lanchonete", "lanche", "pizza", "pizzaria", "delivery", "entrega", "caf√©", 
        "cafeteria", "fast food", "sorveteria", "barzinho", "bar", "self-service", "comida japonesa", "sushi", 
        "rod√≠zios", "food trucks", "jantar fora", "almo√ßo fora", "comida pronta", "churrasco fora", "pastelaria", 
        "temaki", "hamburgueria", "creperia", "padoca"
    ],
    "Transporte": [
        "gasolina", "combust√≠vel", "etanol", "√°lcool", "diesel", "Uber", "t√°xi", "taxi", "√¥nibus","carro" , "bus√£o", "metr√¥", 
        "metro", "ped√°gio", "pedagio", "bicicleta", "bike", "aluguel de carro", "carro alugado", "manuten√ß√£o de bicicleta", 
        "transporte escolar", "van escolar", "bilhete de transporte p√∫blico", "passagem", "passagem rodovi√°ria", 
        "estacionamento", "carona", "aplicativo", "corrida", "transporte p√∫blico", "tr√¢nsito", "vale transporte", 
        "trem", "barco", "ferry"  ],
    "Sa√∫de": [
        "farm√°cia", "farmacia", "rem√©dio", "medicamento", "m√©dico", "consulta", "dentista", "dente", "exames", "exame", 
        "plano de sa√∫de", "plano", "fisioterapia", "fisio", "psic√≥logo", "psi", "nutricionista", "nutri", "√≥culos", 
        "lentes", "cirurgias", "opera√ß√£o", "homeopatia", "acupuntura", "suplementos vitam√≠nicos", "vitaminas", "hospital", 
        "interna√ß√£o", "terapia", "psicoterapia", "ortodontia", "aparelho dental", "pr√≥tese", "check-up", "vacina", 
        "medicina alternativa", "massoterapia"
    ],
    "Educa√ß√£o": [
        "escola", "col√©gio", "faculdade", "universidade", "curso", "aula", "livros", "livro", "material escolar", 
        "material", "p√≥s-gradua√ß√£o", "p√≥s", "tutoria particular", "professor particular", "plataformas de ensino", 
        "EAD", "workshops", "workshop", "congressos", "semin√°rio", "certifica√ß√µes", "certificado", "aulas online", 
        "idiomas", "ingl√™s", "espanhol", "caderno", "mochila", "caneta", "treinamento", "palestra", "escola t√©cnica", 
        "uniforme", "matr√≠cula"
    ],
    "Lazer": [
        "cinema", "filme", "teatro", "show", "shows", "jogos", "game", "bar", "boteco", "passeios", "passeio", "parques", 
        "parque", "museus", "museu", "esportes radicais", "aventura", "clube", "viagens curtas", "bate-volta", "festivais", 
        "festival", "boliche", "escape room", "camping", "rol√™", "balada", "festa", "praia", "academia", "esporte", 
        "trilha", "pescaria", "churrasco", "kart", "paintball"
    ],
    "Shopping": [
        "compras gerais", "compras", "eletr√¥nicos", "eletronico", "souvenirs", "lembrancinha", "presentes", "presente", 
        "lojas de departamento", "loja", "artesanato", "livraria", "games", "jogo", "brinquedos", "brinquedo", "vitrine", 
        "promo√ß√£o", "black friday", "shop", "galeria", "feira de rua", "bazar", "outlet", "roupas de marca", "perfumaria"
    ],
    "Vestu√°rio": [
        "roupas", "roupa", "sapatos", "sapato", "acess√≥rios", "acessorio", "roupas de academia", "roupa esportiva", 
        "roupas de festa", "roupa social", "joias", "bijuteria", "moda praia", "biqu√≠ni", "roupas infantis", "roupa de beb√™", 
        "t√™nis", "chinelo", "bolsa", "mochila", "cinto", "√≥culos de sol", "roupa √≠ntima", "lingerie", "meia", "cal√ßa", 
        "camiseta", "jaqueta", "uniforme", "costureira", "roupa sob medida"
    ],
    "Beleza e cuidados pessoais": [
        "cabeleireiro", "sal√£o", "manicure", "unha", "cosm√©ticos", "maquiagem", "barbearia", "barba", "spa", "tratamentos est√©ticos", 
        "est√©tica", "perfumes", "perfume", "dermatologista", "dermato", "massagem", "depila√ß√£o", "creme", "hidratante", 
        "shampoo", "tratamento", "bronzeamento", "tatuagem", "piercing", "esteticista", "podologia", "corte de cabelo", 
        "unhas posti√ßas", "maquiador"
    ],
    "Contas e utilidades": [
        "internet", "wifi", "energia", "luz", "√°gua", "g√°s", "gas", "telefone", "celular", "TV a cabo", "tv", "manuten√ß√£o el√©trica", 
        "eletricidade", "coleta de lixo", "lixo", "desentupimento", "encanamento", "servi√ßo de esgoto", "esgoto", "seguran√ßa privada", 
        "alarme", "assinatura de tv", "netflix", "conta", "boleto", "fatura", "recarga", "telefonia", "conserto de conta"
    ],
    "Seguro": [
        "seguro viagem", "seguro de vida", "vida", "seguro residencial", "seguro casa", "seguro de carro", "seguro auto", 
        "seguro sa√∫de", "seguro para celular", "seguro de bicicleta", "seguro bike", "seguro contra acidentes", "ap√≥lice", 
        "prote√ß√£o", "seguro odontol√≥gico", "seguro empresarial", "seguro de viagem internacional", "seguro de equipamentos"
    ],
    "Viagens": [
        "hotel", "hospedagem", "passagem a√©rea", "avi√£o", "passagem de √¥nibus", "√¥nibus", "aluguel de carro", "carro alugado", 
        "passeios tur√≠sticos", "turismo", "seguro viagem", "transporte local", "souvenirs", "lembrancinha", "alimenta√ß√£o em viagem", 
        "comida de viagem", "pacote", "excurs√£o", "camping", "resort", "cruzeiro", "hostel", "pousada", "airbnb", "guia tur√≠stico", 
        "ingresso de atra√ß√£o"
    ],
    "Impostos e taxas": [
        "impostos", "imposto", "taxas", "taxa", "multas", "multa", "contribui√ß√£o sindical", "sindicato", "licenciamento de ve√≠culo", 
        "licenciamento", "taxas banc√°rias", "tarifa banc√°ria", "IPVA", "taxa de cart√≥rio", "cart√≥rio", "tarifas de documentos", 
        "darf", "irpf", "juros", "tarifa", "taxa de servi√ßo", "ped√°gio extra", "taxa de administra√ß√£o", "tributo"
    ],
    "Investimentos": [
        "aplica√ß√£o", "investimento", "compra de a√ß√µes", "a√ß√µes", "fundos", "fundo", "criptomoedas", "cripto", "tesouro direto", 
        "tesouro", "investimento imobili√°rio", "im√≥vel", "CDB", "LCI", "LCA", "fundos multimercado", "previd√™ncia privada", 
        "previd√™ncia", "poupan√ßa", "renda fixa", "corretora", "trade", "bitcoin", "ethereum", "day trade", "swing trade"
    ],
    "D√≠vidas e financiamentos": [
        "empr√©stimo", "financiamento", "cart√£o de cr√©dito", "cart√£o", "parcelamentos", "parcela", "cheque especial", "juros", 
        "d√≠vidas pessoais", "d√≠vida", "cons√≥rcio", "credi√°rio", "boleto", "pagamento atrasado", "financiamento de carro", 
        "financiamento de casa", "empr√©stimo pessoal", "agiotagem", "penhor", "refinanciamento"
    ],
    "Presentes e doa√ß√µes": [
        "anivers√°rio", "natal", "casamento", "doa√ß√£o", "caridade", "doa√ß√£o para ONGs", "ONG", "vaquinhas", "presentes corporativos", 
        "brindes", "presente", "mimo", "lembran√ßa", "ajuda", "doa√ß√£o religiosa", "d√≠zimo", "oferta", "presente de amigo secreto", 
        "caixinha", "donativo"
    ],
    "Pets": [
        "ra√ß√£o", "comida", "veterin√°rio", "vet", "acess√≥rios", "coleira", "banho e tosa", "banho", "tosa", "hospedagem", 
        "brinquedos para pet", "brinquedo", "adestramento", "vacinas", "vacina", "consulta veterin√°ria", "medica√ß√£o para pets", 
        "rem√©dio", "pet shop", "gato", "cachorro", "p√°ssaro", "aqu√°rio", "ra√ß√£o especial", "tratamento pet", "hotel pet"
    ],
    "Assinaturas e servi√ßos": [
        "streaming", "netflix", "revistas", "revista", "aplicativos", "app", "servi√ßos online", "clubes de assinatura", 
        "assinatura", "assinatura de cursos", "curso online", "software licenciado", "software", "cloud storage", "nuvem", 
        "Spotify", "m√∫sica", "Amazon Prime", "Disney+", "HBO", "YouTube Premium", "jornal online", "assinatura de academia"
    ],
    "Manuten√ß√£o da casa": [
        "reparos", "conserto", "pintura", "tinta", "limpeza", "produtos de limpeza", "encanador", "encanamento", "eletricista", 
        "el√©trica", "troca de m√≥veis", "m√≥vel novo", "dedetiza√ß√£o", "controle de pragas", "constru√ß√£o e reforma", "reforma", 
        "telhado", "telha", "cortinas e persianas", "persiana", "janela", "vidro", "marceneiro", "carpintaria", "gesso", 
        "piso", "azulejo"
    ],
    "Educa√ß√£o dos filhos": [
        "escola", "col√©gio", "uniforme", "material escolar", "caderno", "mochila", "atividades extracurriculares", "esporte", 
        "m√∫sica", "refor√ßo escolar", "aula particular", "transporte escolar", "van", "excurs√µes", "passeio escolar", "creche", 
        "ber√ß√°rio", "bab√°", "idiomas infantil", "acampamento escolar", "livros infantis", "tablets escolares"
    ],
    "Festas e eventos": [
        "festa", "anivers√°rio", "casamento", "formatura", "aluguel de sal√£o", "sal√£o", "decora√ß√£o", "decor", "buffet", 
        "comida", "fotografia", "foto", "DJ", "banda", "convites", "convite", "bebida", "bolo", "show", "ingresso", 
        "festa infantil", "open bar", "cerimonialista", "aluguel de equipamentos", "som e luz"
    ],
    "Emerg√™ncias": [
        "reserva", "conserto urgente", "m√©dico emergencial", "hospital", "ajuda financeira inesperada", "socorro", "reboque", 
        "chaveiro", "rem√©dio urgente", "despesa imprevista", "urg√™ncia", "emerg√™ncia", "conserto de carro", "queda de energia", 
        "vazamento", "inc√™ndio", "pronto-socorro"
    ],
    "Tecnologia": [
        "celular", "smartphone", "computador", "notebook", "acess√≥rios tech", "carregador", "software", "programa", "impressora", 
        "cartucho", "upgrade de hardware", "upgrade", "console de videogame", "console", "smartwatch", "rel√≥gio inteligente", 
        "tablet", "games", "jogo", "internet", "roteador", "cabo", "TV smart", "caixa de som", "fones de ouvido"
    ],
    "Equipamentos e ferramentas": [
        "ferramentas", "ferramenta", "equipamentos", "equipamento", "manuten√ß√£o", "conserto", "compra de maquin√°rio", "m√°quina", 
        "itens de constru√ß√£o", "material de obra", "equipamentos de seguran√ßa", "capacete", "serra", "furadeira", "parafusadeira", 
        "trena", "escada", "gerador", "solda", "equipamento de jardinagem"
    ],
    "Servi√ßos dom√©sticos": [
        "faxineira", "diarista", "jardineiro", "jardinagem", "bab√°", "cuidador", "cozinheira", "cozinha", "lavanderia", 
        "passadeira", "limpeza", "servi√ßo", "limpeza de piscina", "piscineiro", "caseiro", "zelador dom√©stico", "motorista", 
        "entregador dom√©stico", "servi√ßos gerais", "lavagem de tapete"
    ],
    "Manuten√ß√£o do carro": [
        "revis√£o", "revisao", "pe√ßas", "pe√ßa", "lavagem", "lava jato", "seguro auto", "troca de √≥leo", "√≥leo", 
        "alinhamento e balanceamento", "alinhamento", "troca de pneus", "pneu", "mec√¢nico", "funilaria", "pintura", 
        "bateria", "farol", "limpador de para-brisa", "calibragem", "conserto de ar condicionado", "vidro do carro"
    ],
    "Reservas financeiras": [
        "poupan√ßa", "fundo de emerg√™ncia", "reserva", "reserva para viagens", "reserva para aposentadoria", "economia", 
        "dinheiro guardado", "poupar", "fundo reserva", "caixinha", "cofrinho", "reserva para imprevistos", "pote de dinheiro"
    ],
    "Mesada e ajuda financeira": [
        "mesada para filhos", "mesada", "mesada para familiares", "ajuda para amigos", "transfer√™ncia financeira", 
        "ajuda a terceiros", "dinheiro para fam√≠lia", "grana emprestada", "aux√≠lio financeiro", "presente em dinheiro", 
        "caixinha para algu√©m", "pix para amigo"
    ],
    "Outros": [
        "servi√ßos gerais", "despesas avulsas", "gorjetas", "gorjeta", "despesas banc√°rias", "perda financeira", "outro", 
        "gastos extras", "miscel√¢nea", "diversos", "n√£o categorizado", "compras aleat√≥rias", "despesa pequena", 
        "dinheiro perdido", "taxa extra", "servi√ßo avulso"
    ]
}

CATEGORIAS_RECEITA = {
    "Sal√°rio e Trabalho Formal": [
        "sal√°rio", "salario", "proventos", "pagamento", "ordenado", "renda fixa", "mensal", "holerite", "contracheque", 
        "remunera√ß√£o", "folha de pagamento", "renda CLT", "adicional noturno", "hora extra", "b√¥nus salarial", "comiss√£o fixa", 
        "sal√°rio mensal", "vencimento", "renda de emprego", "carteira assinada", "sal√°rio base", "adicional de periculosidade", 
        "adicional de insalubridade", "gratifica√ß√£o", "pr√™mio de desempenho"
    ],
    "Freelance e Trabalho Aut√¥nomo": [
        "freelance", "bico", "trabalho extra", "freela", "servi√ßo avulso", "job", "trampo", "ganho extra", "aut√¥nomo", 
        "consultoria", "projeto", "presta√ß√£o de servi√ßo", "design gr√°fico", "tradu√ß√£o", "programa√ß√£o", "aulas particulares", 
        "manuten√ß√£o", "servi√ßo t√©cnico", "fotografia", "filmagem", "edi√ß√£o de v√≠deo", "reda√ß√£o", "locu√ß√£o", "produ√ß√£o musical", 
        "artesanato", "costura", "reparos", "pintura", "trabalho manual", "servi√ßo de limpeza", "babysitting", "dog walker", 
        "entrega", "motorista de aplicativo"
    ],
    "Investimentos e Aplica√ß√µes Financeiras": [
        "juros", "dividendos", "renda fixa", "lucro de a√ß√µes", "a√ß√µes", "tesouro direto", "CDB", "poupan√ßa", "lucro", "retorno", 
        "ganho financeiro", "rendimento", "trade", "invest", "criptomoedas", "cripto", "fundos imobili√°rios", "renda passiva", 
        "ganho com forex", "staking de criptomoedas", "NFTs", "royalties", "bitcoin", "ethereum", "lucro de trade", "day trade", 
        "swing trade", "LCI", "LCA", "fundos multimercado", "previd√™ncia privada", "tesouro selic", "renda de investimento", 
        "ganho de capital", "lucro de fundos"
    ],
    "Aluguel e Loca√ß√£o": [
        "aluguel recebido", "loca√ß√£o", "subarrendamento", "renda de im√≥vel", "alugu√©is", "ganho com im√≥vel", "repasse de aluguel", 
        "hospedagem curta", "Airbnb", "inquilino", "loca√ß√£o de carro", "loca√ß√£o de equipamentos", "loca√ß√£o de terrenos", 
        "loca√ß√£o de espa√ßo comercial", "aluguel de casa", "aluguel de apartamento", "renda de temporada", "loca√ß√£o de m√°quinas", 
        "aluguel de ferramentas", "renda de garagem", "aluguel de quarto", "coworking"
    ],
    "Venda de Produtos e Servi√ßos": [
        "venda de produto", "venda de servi√ßo", "venda pessoal", "venda", "revenda", "lucro de venda", "com√©rcio", "neg√≥cio", 
        "brech√≥", "usado", "artesanato", "feira", "dropshipping", "e-commerce", "marketplace", "mercado livre", "OLX", "Shopee", 
        "Etsy", "importa√ß√£o", "venda de comida", "venda de roupas", "venda de eletr√¥nicos", "venda de m√≥veis", "venda de carro", 
        "venda de moto", "lucro de revenda", "venda de cosm√©ticos", "venda de bijuterias", "venda online"
    ],
    "Pr√™mios e Recompensas": [
        "pr√™mio", "heran√ßa", "b√¥nus", "loteria", "ganho", "achado", "recompensa", "cashback", "sorteio", "concursos", "bol√£o", 
        "campanhas de incentivo", "jogos de azar", "casino", "bet", "premia√ß√£o esportiva", "programa de fidelidade", "pr√™mio em dinheiro", 
        "ganho de rifa", "sorteio online", "recompensa de aplicativo", "pr√™mio de competi√ß√£o", "dinheiro encontrado", "recompensa de trabalho"
    ],
    "Comiss√µes e Programas de Afiliados": [
        "comiss√£o", "afiliado", "renda de afiliado", "propaganda", "publicidade", "comiss√£o de venda", "indica√ß√£o", "link de afiliado", 
        "patroc√≠nio", "marketing de afiliados", "renda de parcerias", "dropshipping afiliado", "lucro de indica√ß√£o", "comiss√£o vari√°vel", 
        "ganho por clique", "CPC", "CPA", "lucro de campanha", "afilia√ß√£o online", "renda de influencer"
    ],
    "Presente e Doa√ß√£o Recebida": [
        "presente", "doa√ß√£o recebida", "mimo", "dinheiro de presente", "ajuda", "grana", "caixinha", "gorjeta", "heran√ßa", 
        "mesada recebida", "doa√ß√£o de empresa", "financiamento coletivo", "apoio financeiro", "dinheiro de fam√≠lia", "presente de anivers√°rio", 
        "presente de natal", "vaquinha online", "pix de amigo", "doa√ß√£o religiosa", "ajuda de custo", "donativo"
    ],
    "Reembolso e Restitui√ß√µes": [
        "reembolso", "devolu√ß√£o", "restitui√ß√£o", "volta", "dinheiro de volta", "acerto", "ressarcimento", "indeniza√ß√£o", 
        "seguro recebido", "acerto trabalhista", "plano de sa√∫de reembolso", "seguro de viagem", "devolu√ß√£o de compra", 
        "reembolso de passagem", "restitui√ß√£o de imposto", "IRPF devolvido", "dinheiro retornado", "acerto de conta", 
        "reembolso de aplicativo", "devolu√ß√£o de produto"
    ],
    "Direitos e Benef√≠cios": [
        "aux√≠lio", "aposentadoria", "pens√£o", "seguro-desemprego", "benef√≠cio social", "aux√≠lio emergencial", "BPC", "bolsa fam√≠lia", 
        "FGTS", "d√©cimo terceiro", "participa√ß√£o nos lucros", "abono salarial", "rescis√£o", "benef√≠cios previdenci√°rios", 
        "pens√µes aliment√≠cias", "reajuste salarial", "benef√≠cio de servidor p√∫blico", "aux√≠lio transporte", "vale alimenta√ß√£o convertido em dinheiro", 
        "vale refei√ß√£o em dinheiro", "aux√≠lio doen√ßa", "licen√ßa remunerada", "f√©rias remuneradas", "indeniza√ß√£o trabalhista"
    ],
    "Reservas Financeiras e Aportes": [
        "saque de poupan√ßa", "uso de fundo", "reserva", "dinheiro guardado", "economia", "fundo emergencial", "retirada", 
        "aporte pessoal", "resgate de aplica√ß√£o", "empr√©stimo recebido", "resgate de previd√™ncia privada", "saque de investimento", 
        "dinheiro do cofrinho", "reserva usada", "fundo de reserva", "retirada de CDB", "resgate de tesouro", "saque de a√ß√µes"
    ],
    "Cria√ß√£o de Conte√∫do e Redes Sociais": [
        "monetiza√ß√£o", "YouTube", "TikTok", "Twitch", "Facebook Ads", "Instagram Ads", "blog", "produ√ß√£o de conte√∫do", "assinantes", 
        "OnlyFans", "apoio financeiro", "crowdfunding", "doa√ß√£o de seguidores", "Patreon", "streaming", "live paga", "subscribers", 
        "super chat", "cursos online vendidos", "publicidade no blog", "an√∫ncios", "renda de canal", "views monetizadas", "lives"
    ],
    "Educa√ß√£o e Pesquisa": [
        "bolsa de estudos", "bolsa pesquisa", "inicia√ß√£o cient√≠fica", "bolsa CAPES", "bolsa CNPq", "fundo de pesquisa", 
        "palestras remuneradas", "consultoria acad√™mica", "produ√ß√£o de artigos cient√≠ficos pagos", "mentoria acad√™mica", 
        "aux√≠lio acad√™mico", "renda de professor", "bolsa de mestrado", "bolsa de doutorado", "financiamento de pesquisa", 
        "workshop pago", "curso ministrado"
    ],
    "Transa√ß√µes e Benef√≠cios Banc√°rios": [
        "cashback", "recompensa banc√°ria", "pontos convertidos em dinheiro", "recompensa de cart√£o de cr√©dito", "juros sobre saldo", 
        "incentivos financeiros", "abono banc√°rio", "programa de milhas convertido em dinheiro", "b√¥nus de conta", "reembolso banc√°rio", 
        "lucro de conta remunerada", "cashback de compras", "desconto convertido em dinheiro", "promo√ß√£o banc√°ria"
    ],
    "Empreendedorismo e Startups": [
        "investimento recebido", "capital de risco", "rodada de investimento", "investidor-anjo", "fundo de venture capital", 
        "seed money", "financiamento coletivo", "subven√ß√£o para startup", "subven√ß√£o para inova√ß√£o", "lucro de startup", 
        "venda de participa√ß√£o", "aporte de s√≥cio", "investimento externo", "renda de pitch", "fundo de acelera√ß√£o"
    ],
    "Outros": [
        "renda extra", "dinheiro inesperado", "renda ocasional", "outros ganhos", "devolu√ß√£o de imposto", "cr√©dito banc√°rio", 
        "pagamento atrasado", "troco recebido", "valor ressarcido", "lucro por arbitragem", "compensa√ß√£o por erro banc√°rio", 
        "benef√≠cio inesperado", "dinheiro achado", "reembolso avulso", "ganho pequeno", "lucro n√£o categorizado"
    ]
}

# Flask
app = Flask(__name__)
exclusoes_pendentes = {}

# Banco de Dados
sqlite3.register_adapter(datetime, lambda val: val.isoformat())

def get_db_connection():
    conn = sqlite3.connect("gastos.db")
    conn.row_factory = sqlite3.Row
    return conn

def criar_banco():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        # Dropar tabelas existentes para recriar com subcategoria
        cursor.execute("DROP TABLE IF EXISTS gastos")
        cursor.execute("DROP TABLE IF EXISTS receitas")
        cursor.execute("DROP TABLE IF EXISTS usuarios_boas_vindas")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS gastos (
            id TEXT PRIMARY KEY,
            usuario TEXT NOT NULL,
            valor REAL NOT NULL,
            categoria TEXT NOT NULL,
            subcategoria TEXT,
            data TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            mensagem TEXT
        )
        """)
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS receitas (
            id TEXT PRIMARY KEY,
            usuario TEXT NOT NULL,
            valor REAL NOT NULL,
            categoria TEXT NOT NULL,
            subcategoria TEXT,
            data TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            mensagem TEXT
        )
        """)
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS usuarios_autorizados (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            numero TEXT UNIQUE NOT NULL
        )
        """)
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS usuarios_boas_vindas (
            numero TEXT PRIMARY KEY,
            recebeu_boas_vindas INTEGER DEFAULT 0
        )
        """)
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_gastos_usuario_data ON gastos (usuario, data)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_receitas_usuario_data ON receitas (usuario, data)")
        numeros_iniciais = ["whatsapp:+555198995077"]
        for numero in numeros_iniciais:
            cursor.execute("INSERT OR IGNORE INTO usuarios_autorizados (numero) VALUES (?)", (numero,))
            cursor.execute("INSERT OR IGNORE INTO usuarios_boas_vindas (numero, recebeu_boas_vindas) VALUES (?, 1)", (numero,))
        conn.commit()

# Autentica√ß√£o
def usuario_autorizado(numero):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT numero FROM usuarios_autorizados WHERE numero = ?", (numero,))
        return cursor.fetchone() is not None

def adicionar_usuario(numero):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO usuarios_autorizados (numero) VALUES (?)", (numero,))
        conn.commit()
    logger.info(f"‚úÖ Usu√°rio autorizado: {numero}")

def remover_usuario(numero):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM usuarios_autorizados WHERE numero = ?", (numero,))
        conn.commit()
    logger.info(f"‚úÖ Usu√°rio removido: {numero}")

def listar_usuarios_autorizados():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT numero FROM usuarios_autorizados")
        usuarios = cursor.fetchall()
    return [usuario["numero"].replace("whatsapp:", "") for usuario in usuarios]

def usuario_recebeu_boas_vindas(numero):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT recebeu_boas_vindas FROM usuarios_boas_vindas WHERE numero = ?", (numero,))
        resultado = cursor.fetchone()
        if resultado and resultado["recebeu_boas_vindas"] == 1:
            return True
        return False

def marcar_boas_vindas_enviada(numero):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT OR REPLACE INTO usuarios_boas_vindas (numero, recebeu_boas_vindas) VALUES (?, 1)", (numero,))
        conn.commit()
    logger.info(f"‚úÖ Boas-vindas marcadas como enviadas para {numero}")

# Fun√ß√µes Auxiliares
def formatar_valor(valor):
    return f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def parse_date(texto):
    texto = texto.lower()
    hoje = datetime.now()
    if "ontem" in texto:
        return hoje - timedelta(days=1)
    elif "semana passada" in texto:
        return hoje - timedelta(days=7)
    elif "dia" in texto:
        match = re.search(r"dia (\d{1,2})", texto)
        if match:
            dia = int(match.group(1))
            mes = hoje.month
            ano = hoje.year
            if dia > hoje.day:
                if mes > 1:
                    mes -= 1
                else:
                    mes = 12
                    ano -= 1
            try:
                return datetime(ano, mes, dia)
            except ValueError:
                return hoje
    return hoje

def processar_mensagem(mensagem):
    doc = nlp(mensagem.lower())
    mensagem_sem_acento = unidecode(mensagem.lower())  # Normaliza a mensagem inteira
    logger.info(f"Processando mensagem completa: {mensagem} (sem acento: {mensagem_sem_acento})")
    
    tipo = "gasto"  # Padr√£o
    if any(token.lemma_ in ["receber", "ganhar", "recebi"] for token in doc):
        tipo = "receita"
    categorias = CATEGORIAS_RECEITA if tipo == "receita" else CATEGORIAS_DESPESA
    
    data_atual = parse_date(mensagem)
    
    valores = []
    for token in doc:
        if token.like_num:
            try:
                valor = float(token.text.replace(",", ".").strip())
                if 0 < valor <= 10000:
                    valores.append(valor)
                    logger.info(f"Valor encontrado: {valor}")
            except ValueError:
                pass
    
    if not valores:
        logger.info("Nenhum valor v√°lido encontrado na mensagem")
        return []
    
    itens = []
    for valor in valores:
        categoria_atual = "Outros"
        subcategoria_atual = None
        
        # Busca por correspond√™ncia em subcategorias na mensagem inteira
        melhor_correspondencia = None
        maior_tamanho = 0
        for cat, subs in categorias.items():
            for sub in subs:
                sub_sem_acento = unidecode(sub.lower())
                if sub_sem_acento in mensagem_sem_acento:
                    if sub_sem_acento == "gas" and "gastei" in mensagem_sem_acento:
                        continue
                    if len(sub_sem_acento) > maior_tamanho:
                        melhor_correspondencia = (cat, sub.capitalize())
                        maior_tamanho = len(sub_sem_acento)
                        logger.info(f"Match encontrado: {cat}/{sub} (normalizado: {sub_sem_acento})")
        
        if melhor_correspondencia:
            categoria_atual, subcategoria_atual = melhor_correspondencia
        else:
            logger.info(f"Nenhuma subcategoria encontrada, usando categoria padr√£o: {categoria_atual}")
        
        itens.append((valor, categoria_atual, subcategoria_atual, data_atual, tipo))
    
    return itens
def gerar_id_unico():
    return f"#{uuid.uuid4().hex[:4]}"

def salvar_gasto(usuario, valor, categoria, subcategoria=None, data=None, mensagem=None):
    try:
        id_registro = gerar_id_unico()
        with get_db_connection() as conn:
            cursor = conn.cursor()
            if data is None:
                cursor.execute("INSERT INTO gastos (id, usuario, valor, categoria, subcategoria, mensagem) VALUES (?, ?, ?, ?, ?, ?)", 
                               (id_registro, usuario, valor, categoria, subcategoria, mensagem))
            else:
                cursor.execute("INSERT INTO gastos (id, usuario, valor, categoria, subcategoria, data, mensagem) VALUES (?, ?, ?, ?, ?, ?, ?)", 
                               (id_registro, usuario, valor, categoria, subcategoria, data, mensagem))
            conn.commit()
            logger.info(f"‚úÖ Gasto salvo: id={id_registro}, usuario={usuario}, valor={valor}, categoria={categoria}, subcategoria={subcategoria}, data={data or 'hoje'}")
            return id_registro
    except Exception as e:
        logger.error(f"Erro ao salvar gasto: {str(e)}")
        return None

def salvar_receita(usuario, valor, categoria, subcategoria=None, data=None, mensagem=None):
    try:
        id_registro = gerar_id_unico()
        with get_db_connection() as conn:
            cursor = conn.cursor()
            if data is None:
                cursor.execute("INSERT INTO receitas (id, usuario, valor, categoria, subcategoria, mensagem) VALUES (?, ?, ?, ?, ?, ?)", 
                               (id_registro, usuario, valor, categoria, subcategoria, mensagem))
            else:
                cursor.execute("INSERT INTO receitas (id, usuario, valor, categoria, subcategoria, data, mensagem) VALUES (?, ?, ?, ?, ?, ?, ?)", 
                               (id_registro, usuario, valor, categoria, subcategoria, data, mensagem))
            conn.commit()
            logger.info(f"‚úÖ Receita salva: id={id_registro}, usuario={usuario}, valor={valor}, categoria={categoria}, subcategoria={subcategoria}, data={data or 'hoje'}")
            return id_registro
    except Exception as e:
        logger.error(f"Erro ao salvar receita: {str(e)}")
        return None

def excluir_registro(usuario, id_registro, tipo="gasto"):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            tabela = "gastos" if tipo == "gasto" else "receitas"
            cursor.execute(f"DELETE FROM {tabela} WHERE usuario = ? AND id = ?", (usuario, id_registro))
            if cursor.rowcount > 0:
                conn.commit()
                logger.info(f"‚úÖ Registro exclu√≠do: usuario={usuario}, id={id_registro}, tipo={tipo}")
                return True
            else:
                logger.info(f"‚ö†Ô∏è Registro n√£o encontrado: usuario={usuario}, id={id_registro}, tipo={tipo}")
                return False
    except Exception as e:
        logger.error(f"Erro ao excluir registro: {str(e)}")
        return False

# An√°lise
def calcular_gastos_hoje(usuario):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        hoje = datetime.now()
        inicio_hoje = hoje.replace(hour=0, minute=0, second=0, microsecond=0)
        fim_hoje = hoje.replace(hour=23, minute=59, second=59, microsecond=999999)
        cursor.execute("SELECT SUM(valor) FROM gastos WHERE usuario = ? AND data BETWEEN ? AND ?", 
                       (usuario, inicio_hoje, fim_hoje))
        total = cursor.fetchone()[0] or 0.0
    return total

def calcular_receitas_hoje(usuario):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        hoje = datetime.now()
        inicio_hoje = hoje.replace(hour=0, minute=0, second=0, microsecond=0)
        fim_hoje = hoje.replace(hour=23, minute=59, second=59, microsecond=999999)
        cursor.execute("SELECT SUM(valor) FROM receitas WHERE usuario = ? AND data BETWEEN ? AND ?", 
                       (usuario, inicio_hoje, fim_hoje))
        total = cursor.fetchone()[0] or 0.0
    return total

def gerar_relatorio_diario(usuario):
    hoje = datetime.now()
    inicio_hoje = hoje.replace(hour=0, minute=0, second=0, microsecond=0)
    fim_hoje = hoje.replace(hour=23, minute=59, second=59, microsecond=999999)

    with get_db_connection() as conn:
        query_gastos = """
        SELECT categoria, subcategoria, SUM(valor) as valor 
        FROM gastos 
        WHERE usuario = ? AND data BETWEEN ? AND ? 
        GROUP BY categoria, subcategoria
        """
        df_gastos = pd.read_sql_query(query_gastos, conn, params=(usuario, inicio_hoje, fim_hoje))
        
        query_receitas = """
        SELECT categoria, subcategoria, SUM(valor) as valor 
        FROM receitas 
        WHERE usuario = ? AND data BETWEEN ? AND ? 
        GROUP BY categoria, subcategoria
        """
        df_receitas = pd.read_sql_query(query_receitas, conn, params=(usuario, inicio_hoje, fim_hoje))

    total_gastos = df_gastos['valor'].sum() if not df_gastos.empty else 0.0
    total_receitas = df_receitas['valor'].sum() if not df_receitas.empty else 0.0
    
    if df_gastos.empty and df_receitas.empty:
        raise ValueError("Nenhum dado dispon√≠vel para hoje.")
    
    df_gastos["valor_formatted"] = df_gastos["valor"].apply(formatar_valor) if not df_gastos.empty else None
    df_receitas["valor_formatted"] = df_receitas["valor"].apply(formatar_valor) if not df_receitas.empty else None
    
    logger.info(f"Dados para relat√≥rio di√°rio: Gastos={df_gastos.to_dict()}, Receitas={df_receitas.to_dict()}")
    return df_gastos, df_receitas, total_gastos, total_receitas, hoje, hoje

def gerar_relatorio_semanal(usuario):
    hoje = datetime.now()
    inicio_semana = hoje - timedelta(days=hoje.weekday())
    fim_semana = inicio_semana + timedelta(days=6)
    inicio_semana = inicio_semana.replace(hour=0, minute=0, second=0, microsecond=0)
    fim_semana = fim_semana.replace(hour=23, minute=59, second=59, microsecond=999999)

    with get_db_connection() as conn:
        query_gastos = """
        SELECT categoria, subcategoria, SUM(valor) as valor 
        FROM gastos 
        WHERE usuario = ? AND data BETWEEN ? AND ? 
        GROUP BY categoria, subcategoria
        """
        df_gastos = pd.read_sql_query(query_gastos, conn, params=(usuario, inicio_semana, fim_semana))
        
        query_receitas = """
        SELECT categoria, subcategoria, SUM(valor) as valor 
        FROM receitas 
        WHERE usuario = ? AND data BETWEEN ? AND ? 
        GROUP BY categoria, subcategoria
        """
        df_receitas = pd.read_sql_query(query_receitas, conn, params=(usuario, inicio_semana, fim_semana))

    total_gastos = df_gastos['valor'].sum() if not df_gastos.empty else 0.0
    total_receitas = df_receitas['valor'].sum() if not df_receitas.empty else 0.0
    
    if df_gastos.empty and df_receitas.empty:
        raise ValueError("Nenhum dado dispon√≠vel para a semana atual.")
    
    df_gastos["valor_formatted"] = df_gastos["valor"].apply(formatar_valor) if not df_gastos.empty else None
    df_receitas["valor_formatted"] = df_receitas["valor"].apply(formatar_valor) if not df_receitas.empty else None
    
    logger.info(f"Dados para relat√≥rio semanal: Gastos={df_gastos.to_dict()}, Receitas={df_receitas.to_dict()}")
    return df_gastos, df_receitas, total_gastos, total_receitas, inicio_semana, fim_semana

def gerar_relatorio_mensal(usuario, mes=None):
    hoje = datetime.now()
    if mes:
        meses = {
            "janeiro": 1, "fevereiro": 2, "mar√ßo": 3, "abril": 4, "maio": 5, "junho": 6,
            "julho": 7, "agosto": 8, "setembro": 9, "outubro": 10, "novembro": 11, "dezembro": 12
        }
        mes_num = meses.get(mes.lower())
        if not mes_num:
            raise ValueError("M√™s inv√°lido. Use: janeiro, fevereiro, etc.")
        ano = hoje.year if mes_num <= hoje.month else hoje.year - 1
        inicio_mes = datetime(ano, mes_num, 1)
    else:
        inicio_mes = hoje.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        ano = hoje.year
        mes_num = hoje.month
    
    ultimo_dia = (inicio_mes.replace(month=mes_num % 12 + 1, day=1) - timedelta(days=1) if mes_num < 12 else 
                  datetime(ano + 1, 1, 1) - timedelta(days=1))
    fim_mes = ultimo_dia.replace(hour=23, minute=59, second=59, microsecond=999999)

    with get_db_connection() as conn:
        query_gastos = """
        SELECT categoria, subcategoria, SUM(valor) as valor 
        FROM gastos 
        WHERE usuario = ? AND data BETWEEN ? AND ? 
        GROUP BY categoria, subcategoria
        """
        df_gastos = pd.read_sql_query(query_gastos, conn, params=(usuario, inicio_mes, fim_mes))
        
        query_receitas = """
        SELECT categoria, subcategoria, SUM(valor) as valor 
        FROM receitas 
        WHERE usuario = ? AND data BETWEEN ? AND ? 
        GROUP BY categoria, subcategoria
        """
        df_receitas = pd.read_sql_query(query_receitas, conn, params=(usuario, inicio_mes, fim_mes))

    total_gastos = df_gastos['valor'].sum() if not df_gastos.empty else 0.0
    total_receitas = df_receitas['valor'].sum() if not df_receitas.empty else 0.0
    
    if df_gastos.empty and df_receitas.empty:
        mes_str = mes or hoje.strftime('%B').lower()
        raise ValueError(f"Nenhum dado dispon√≠vel para o m√™s de {mes_str}.")
    
    df_gastos["valor_formatted"] = df_gastos["valor"].apply(formatar_valor) if not df_gastos.empty else None
    df_receitas["valor_formatted"] = df_receitas["valor"].apply(formatar_valor) if not df_receitas.empty else None
    
    logger.info(f"Dados para relat√≥rio mensal: Gastos={df_gastos.to_dict()}, Receitas={df_receitas.to_dict()}")
    return df_gastos, df_receitas, total_gastos, total_receitas, inicio_mes, fim_mes

# Rota Principal
@app.route("/webhook", methods=["POST"])
def webhook():
    if not request.form or "Body" not in request.form or "From" not in request.form:
        logger.error("Requisi√ß√£o inv√°lida: campos obrigat√≥rios ausentes")
        resp = MessagingResponse()
        resp.message("‚ö†Ô∏è Erro interno: requisi√ß√£o inv√°lida. Contate o suporte.")
        return str(resp), 400

    mensagem = request.form["Body"].strip().lower()
    numero = request.form["From"]

    if not mensagem:
        logger.info(f"Usu√°rio {numero} enviou mensagem vazia")
        resp = MessagingResponse()
        resp.message("‚ö†Ô∏è Mensagem vazia. Tente algo como 'Gastei 50 no mercado'.")
        return str(resp)
    if len(mensagem) > 1000:
        logger.warning(f"Mensagem de {numero} excedeu limite: {len(mensagem)} caracteres")
        resp = MessagingResponse()
        resp.message("‚ö†Ô∏è Mensagem muito longa. Limite: 1000 caracteres.")
        return str(resp)

    logger.info(f"Mensagem recebida: '{mensagem}' de {numero}")

    if not usuario_autorizado(numero):
        logger.info(f"Usu√°rio n√£o autorizado: {numero}")
        resp = MessagingResponse()
        resp.message("‚ö†Ô∏è Voc√™ n√£o est√° autorizado a usar este servi√ßo. Contate o administrador.")
        return str(resp)

    resp = MessagingResponse()

    # Verificar e enviar mensagem de boas-vindas
    if not usuario_recebeu_boas_vindas(numero):
        resp.message(MENSAGEM_BOAS_VINDAS)
        marcar_boas_vindas_enviada(numero)
        return str(resp)

    # Comandos Admin
    if numero == ADMIN_NUMERO:
        if mensagem.startswith("add "):
            novo_numero = mensagem.split(" ")[1].strip()
            if not re.match(r"^\+?\d{10,15}$", novo_numero):
                resp.message("‚ö†Ô∏è N√∫mero inv√°lido. Use formato: +551234567890")
                return str(resp)
            novo_numero = "whatsapp:" + novo_numero if not novo_numero.startswith("whatsapp:") else novo_numero
            adicionar_usuario(novo_numero)
            resp.message(f"‚úÖ Usu√°rio {novo_numero} autorizado.")
            return str(resp)
        elif mensagem.startswith("remove "):
            numero_remover = mensagem.split(" ")[1].strip()
            if not re.match(r"^\+?\d{10,15}$", numero_remover):
                resp.message("‚ö†Ô∏è N√∫mero inv√°lido. Use formato: +551234567890")
                return str(resp)
            numero_remover = "whatsapp:" + numero_remover if not numero_remover.startswith("whatsapp:") else numero_remover
            remover_usuario(numero_remover)
            resp.message(f"‚úÖ Usu√°rio {numero_remover} removido.")
            return str(resp)
        elif mensagem == "listar":
            usuarios = listar_usuarios_autorizados()
            resp.message(f"üìã Usu√°rios autorizados:\n" + "\n".join(usuarios) if usuarios else "‚ö†Ô∏è Nenhum usu√°rio autorizado.")
            return str(resp)

    # Exclus√£o de Registros
    if numero in exclusoes_pendentes:
        id_registro, tipo = exclusoes_pendentes[numero]
        if mensagem == "sim":
            with get_db_connection() as conn:
                cursor = conn.cursor()
                tabela = "gastos" if tipo == "gasto" else "receitas"
                cursor.execute(f"SELECT * FROM {tabela} WHERE usuario = ? AND id = ?", (numero, id_registro))
                registro = cursor.fetchone()
                if registro and excluir_registro(numero, id_registro, tipo):
                    valor = formatar_valor(registro['valor'])
                    categoria = registro['categoria']
                    subcategoria = registro['subcategoria'] or "Geral"
                    tipo_str = "Gasto" if tipo == "gasto" else "Receita"
                    resp.message(f"‚úÖ {tipo_str} ID {id_registro} exclu√≠do com sucesso ({valor} em {categoria}/{subcategoria}).")
                else:
                    resp.message(f"‚ö†Ô∏è Registro ID {id_registro} n√£o encontrado ou j√° exclu√≠do.")
            del exclusoes_pendentes[numero]
        elif mensagem == "n√£o":
            resp.message(f"‚ùå Exclus√£o do ID {id_registro} cancelada.")
            del exclusoes_pendentes[numero]
        else:
            resp.message("‚ö†Ô∏è Responda apenas 'Sim' ou 'N√£o'.")
        return str(resp)
    
    if mensagem.startswith("excluir id ") or mensagem.startswith("excluir "):
        try:
            id_registro = mensagem.split("excluir ")[1].split()[0] if "excluir id " not in mensagem else mensagem.split("excluir id ")[1].split()[0]
            if not re.match(r"^#\w{4}$", id_registro):
                resp.message("‚ö†Ô∏è ID inv√°lido. Ex.: 'excluir #60fc'")
                return str(resp)
            
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM gastos WHERE usuario = ? AND id = ?", (numero, id_registro))
                registro_gasto = cursor.fetchone()
                cursor.execute("SELECT * FROM receitas WHERE usuario = ? AND id = ?", (numero, id_registro))
                registro_receita = cursor.fetchone()
                
                if registro_gasto:
                    tipo = "gasto"
                    registro = registro_gasto
                elif registro_receita:
                    tipo = "receita"
                    registro = registro_receita
                else:
                    resp.message(f"‚ö†Ô∏è Registro ID {id_registro} n√£o encontrado.")
                    return str(resp)
                
                exclusoes_pendentes[numero] = (id_registro, tipo)
                valor = formatar_valor(registro['valor'])
                categoria = registro['categoria']
                subcategoria = registro['subcategoria'] or "Geral"
                tipo_str = "Gasto" if tipo == "gasto" else "Receita"
                resp.message(f"Confirmar exclus√£o de {tipo_str} ID {id_registro} ({valor} em {categoria}/{subcategoria})?\nResponda 'Sim' ou 'N√£o'")
            return str(resp)
        except IndexError:
            resp.message("‚ö†Ô∏è ID inv√°lido. Ex.: 'excluir #60fc'")
            return str(resp)

    # Relat√≥rios
    if ("relat√≥rio" in mensagem or "resumo" in mensagem) and ("semanal" in mensagem or "semana" in mensagem):
        try:
            df_gastos, df_receitas, total_gastos, total_receitas, inicio_semana, fim_semana = gerar_relatorio_semanal(numero)
            inicio_str = inicio_semana.strftime("%d/%m/%Y")
            fim_str = fim_semana.strftime("%d/%m/%Y")
            
            report_text = f"üìä Relat√≥rio Semanal ({inicio_str} a {fim_str})\n\n"
            
            report_text += "üü¢ Entradas\n\n"
            if not df_receitas.empty:
                categorias = df_receitas.groupby("categoria")
                for cat, grupo in categorias:
                    report_text += f"    üí∞ {cat}\n"
                    for _, row in grupo.iterrows():
                        subcat = row['subcategoria'] if row['subcategoria'] else "Geral"
                        report_text += f"        {subcat}: {row['valor_formatted']}\n"
            else:
                report_text += "    Nenhuma entrada registrada.\n"
            
            report_text += "\nüî¥ Sa√≠das\n\n"
            if not df_gastos.empty:
                categorias = df_gastos.groupby("categoria")
                for cat, grupo in categorias:
                    report_text += f"    üí∏ {cat}\n"
                    for _, row in grupo.iterrows():
                        subcat = row['subcategoria'] if row['subcategoria'] else "Geral"
                        report_text += f"        {subcat}: {row['valor_formatted']}\n"
            else:
                report_text += "    Nenhuma sa√≠da registrada.\n"
            
            saldo = total_receitas - total_gastos
            report_text += (f"\n       Total de Despesas: {formatar_valor(total_gastos)}\n"
                           f"       Total de Entradas: {formatar_valor(total_receitas)}\n"
                           f" üè¶ Saldo: {'-' if saldo < 0 else ''}{formatar_valor(abs(saldo))}")
            
            resp.message(report_text)
        except ValueError as e:
            resp.message(f"‚ö†Ô∏è {str(e)}")
        return str(resp)
    
    elif ("relat√≥rio" in mensagem or "resumo" in mensagem) and ("di√°rio" in mensagem or "diario" in mensagem or "hoje" in mensagem or "do dia" in mensagem or mensagem == "resumo do dia"):
        try:
            logger.info(f"Gerando relat√≥rio di√°rio para {numero}")
            df_gastos, df_receitas, total_gastos, total_receitas, inicio_dia, fim_dia = gerar_relatorio_diario(numero)
            data_str = inicio_dia.strftime("%d/%m/%Y")
            
            report_text = f"üìä Relat√≥rio Di√°rio ({data_str})\n\n"
            
            report_text += "üü¢ Entradas\n\n"
            if not df_receitas.empty:
                categorias = df_receitas.groupby("categoria")
                for cat, grupo in categorias:
                    report_text += f"    üí∞ {cat}\n"
                    for _, row in grupo.iterrows():
                        subcat = row['subcategoria'] if row['subcategoria'] else "Geral"
                        report_text += f"        {subcat}: {row['valor_formatted']}\n"
            else:
                report_text += "    Nenhuma entrada registrada.\n"
            
            report_text += "\nüî¥ Sa√≠das\n\n"
            if not df_gastos.empty:
                categorias = df_gastos.groupby("categoria")
                for cat, grupo in categorias:
                    report_text += f"    üí∏ {cat}\n"
                    for _, row in grupo.iterrows():
                        subcat = row['subcategoria'] if row['subcategoria'] else "Geral"
                        report_text += f"        {subcat}: {row['valor_formatted']}\n"
            else:
                report_text += "    Nenhuma sa√≠da registrada.\n"
            
            saldo = total_receitas - total_gastos
            report_text += (f"\n       Total de Despesas: {formatar_valor(total_gastos)}\n"
                           f"       Total de Entradas: {formatar_valor(total_receitas)}\n"
                           f" üè¶ Saldo: {'-' if saldo < 0 else ''}{formatar_valor(abs(saldo))}")
            
            logger.info(f"Enviando resposta ao WhatsApp: {report_text}")
            resp.message(report_text)
            logger.info(f"Resposta enviada com sucesso para {numero}")
        except ValueError as e:
            logger.error(f"Erro ao gerar relat√≥rio di√°rio: {str(e)}")
            resp.message(f"‚ö†Ô∏è {str(e)}")
        except Exception as e:
            logger.error(f"Erro inesperado no relat√≥rio di√°rio: {str(e)}")
            resp.message("‚ö†Ô∏è Erro interno ao gerar o relat√≥rio. Tente novamente.")
        return str(resp)
    
    elif "relat√≥rio" in mensagem or "resumo" in mensagem:
        try:
            mes = None
            for m in ["janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho", 
                      "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"]:
                if m in mensagem:
                    mes = m
                    break
            df_gastos, df_receitas, total_gastos, total_receitas, inicio_mes, fim_mes = gerar_relatorio_mensal(numero, mes=mes)
            inicio_str = inicio_mes.strftime("%d/%m/%Y")
            fim_str = fim_mes.strftime("%d/%m/%Y")
            mes_str = mes.capitalize() if mes else datetime.now().strftime("%B").capitalize()
            
            report_text = f"üìä Relat√≥rio Mensal de {mes_str} ({inicio_str} a {fim_str})\n\n"
            
            report_text += "üü¢ Entradas\n\n"
            if not df_receitas.empty:
                categorias = df_receitas.groupby("categoria")
                for cat, grupo in categorias:
                    report_text += f"    üí∞ {cat}\n"
                    for _, row in grupo.iterrows():
                        subcat = row['subcategoria'] if row['subcategoria'] else "Geral"
                        report_text += f"        {subcat}: {row['valor_formatted']}\n"
            else:
                report_text += "    Nenhuma entrada registrada.\n"
            
            report_text += "\nüî¥ Sa√≠das\n\n"
            if not df_gastos.empty:
                categorias = df_gastos.groupby("categoria")
                for cat, grupo in categorias:
                    report_text += f"    üí∏ {cat}\n"
                    for _, row in grupo.iterrows():
                        subcat = row['subcategoria'] if row['subcategoria'] else "Geral"
                        report_text += f"        {subcat}: { row['valor_formatted']}\n"
            else:
                report_text += "    Nenhuma sa√≠da registrada.\n"
            
            saldo = total_receitas - total_gastos
            report_text += (f"\n       Total de Despesas: {formatar_valor(total_gastos)}\n"
                           f"       Total de Entradas: {formatar_valor(total_receitas)}\n"
                           f" üè¶ Saldo: {'-' if saldo < 0 else ''}{formatar_valor(abs(saldo))}")
            
            resp.message(report_text)
        except ValueError as e:
            resp.message(f"‚ö†Ô∏è {str(e)}")
        return str(resp)
    
    # Registro de Gastos e Receitas
    else:
        itens = processar_mensagem(mensagem)
        if itens:
            respostas = []
            for valor, categoria, subcategoria, data, tipo in itens:
                if tipo == "gasto":
                    id_registro = salvar_gasto(numero, valor, categoria, subcategoria, data, mensagem)
                    if id_registro:
                        total_gastos_hoje = calcular_gastos_hoje(numero)
                        subcat_str = f"/{subcategoria}" if subcategoria else ""
                        respostas.append(
                            f"üìå Gasto Registrado!\n"
                            f"üîπ Categoria: {categoria}{subcat_str}\n"
                            f"üí∞ Valor: {formatar_valor(valor)}\n"
                            f"üìÖ Data: {data.strftime('%d/%m/%Y')}\n"
                            f"üìä Total gasto hoje: {formatar_valor(total_gastos_hoje)}\n"
                            f"üÜî ID: {id_registro}\n\n"
                            f"üì¢ Para mais detalhes, digite \"Resumo do Dia\"."
                        )
                    else:
                        respostas.append("‚ö†Ô∏è Erro ao registrar gasto.")
                else:
                    id_registro = salvar_receita(numero, valor, categoria, subcategoria, data, mensagem)
                    if id_registro:
                        total_receitas_hoje = calcular_receitas_hoje(numero)
                        subcat_str = f"/{subcategoria}" if subcategoria else ""
                        respostas.append(
                            f"üìå Receita Registrada!\n"
                            f"üîπ Categoria: {categoria}{subcat_str}\n"
                            f"üí∞ Valor: {formatar_valor(valor)}\n"
                            f"üìÖ Data: {data.strftime('%d/%m/%Y')}\n"
                            f"üìä Total recebido hoje: {formatar_valor(total_receitas_hoje)}\n"
                            f"üÜî ID: {id_registro}\n\n"
                            f"üì¢ Para mais detalhes, digite \"Resumo do Dia\"."
                        )
                    else:
                        respostas.append("‚ö†Ô∏è Erro ao registrar receita.")
            resp.message("\n\n".join(respostas))
        else:
            resp.message("‚ö†Ô∏è N√£o entendi. Ex.: 'Gastei 50 em gasolina', 'Recebi 100 de sal√°rio', 'Excluir #60fc', 'Resumo semana'")
        return str(resp)

if __name__ == "__main__":
    criar_banco()
   app.run(host='0.0.0.0', port=5000, debug=True)
